HW-02

Домашнее задание 2
Создай ветку 02-express из ветки master.

Написать REST API для работы с коллекцией контактов. Для работы с REST API используй Postman.

Шаг 1
Добавь в проект пакеты express, morgan и cors.

Шаг 2
В index.js веб сервер на express и добавляем прослойки morgan и cors. Настраивай раутинг для работы с коллекцией контактов.

REST API должен поддерживать следующие рауты.

@ GET /api/contacts
ничего не получает
вызывает функцию listContacts для работы с json-файлом contacts.json
возвращает массив всех контактов в json-формате со статусом 200

@ GET /api/contacts/:contactId
Не получает body
Получает параметр contactId
вызывает функцию getById для работы с json-файлом contacts.json
если такой id есть, возвращает обьект контакта в json-формате со статусом 200
если такого id нет, возвращает json с ключом "message": "Not found" и статусом 404

@ POST /api/contacts
Получает body в формате {name, email, phone}
Если в body нет каких-то обязательных полей, возарщает json с ключом {"message": "missing required name field"} и статусом 400
Если с body все хорошо, добавляет уникальный идентификатор в обьект контакта
Вызывает функцию addContact(body) для сохранения контакта в файле contacts.json
По результату работы функции возвращает обьект с добавленным id {id, name, email, phone} и статусом 201

@ DELETE /api/contacts/:contactId
Не получает body
Получает параметр contactId
вызывает функцию removeContact для работы с json-файлом contacts.json
если такой id есть, возвращает json формата {"message": "contact deleted"} и статусом 200
если такого id нет, возвращает json с ключом "message": "Not found" и статусом 404

@ PATCH /api/contacts/:contactId
Получает параметр contactId
Получает body в json-формате c обновлением любых полей name, email и phone
Если body нет, возарщает json с ключом {"message": "missing fields"} и статусом 400
Если с body все хорошо, вызывает функцию updateContact(contactId, body) (напиши ее) для обновления контакта в файле contacts.json
По результату работы функции возвращает обновленный обьект контакта и статусом 200. В противном случае, возвращает json с ключом "message": "Not found" и статусом 404

Д/З-02
Коментар ментора:

1. Во 2 дз у вас будет две проверки, при создании записи, и при обновлении записи. 
Проверки делаются с помощью библиотеки joi, или ее аналога.
Проверки используются в качестве midellware в ваших роутах. У вас должна уже быть архитектура приложения -  REST или   MVC. На ваше усмотрение. 
Или то, как Вам покажет преподаватель. Главное, что у вас должно быть разделение на контроллеры, роуты и сам сервер. 


HW-03

Создай ветку 03-mongodb из ветки master.

Продолжи создание REST API для работы с коллекцией контактов.

Шаг 1
Создай аккаунт на MongoDB Atlas. После чего в аккаунте создай новый проект и настрой бесплатный кластер. Во время настройки кластера выбери провавйдера и регион как на скриншоте ниже. Если выбрать слишком удаленный регион, скорость ответа сервера будет дольше.

atlas cluster setup

Шаг 2
Установи графический редактор MongoDB Compass для удобной работы с базой данных для MongoDB. Настрой подключение своей облачной базы данных к Compass. В MongoDB Atlas не забудь создать пользователя с правами администратора.

Шаг 3
Через Compass создай базу данных db-contacts и в ней коллекцию contacts. Возьми ссылка на json и при помощи Compass наполни коллекцию contacts (сделай импорт) его содержимым.

Шаг 4
Используй исходный код домашней работы #2 и замени хранение контактов из json-файла на созданную тобой базу данных.

Напиши код для создания подключения к MongoDB при помощи Mongoose.
При успешном подключении выведи в консоль сообщение "Database connection successful".
Обязательно обработай ошибку подключения. Выведи в консоль сообщение ошибки и заверши процесс используя process.exit(1).
В функциях обработки запросов замени код CRUD-операций над контактами из файла, на Mongoose-методы для работы с коллекцией контактов в базе данных.